{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Core Infrastructure and Project Setup",
        "description": "Initialize the Next.js project, integrate with Supabase for database and authentication, and set up the basic frontend layout and component structure.",
        "details": "Initialize Next.js 15 project with App Router. Configure Supabase client for PostgreSQL DB, Auth, and Storage. Implement basic user authentication (login/logout/signup) using Supabase Auth. Create the main responsive layout (Header, Footer) using Tailwind CSS. Set up ESLint, Prettier, and project structure as per PRD.",
        "testStrategy": "Verify project builds successfully. Test user registration and login flows. Check that the main layout is responsive on mobile and desktop. Run `lint` and `type-check` scripts to ensure code quality.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Next.js 15 Projesi Kurulumu",
            "description": "Next.js 15 projesini App Router ile başlat ve temel yapıyı oluştur",
            "details": "- Next.js 15 projesi oluştur (npx create-next-app@latest)\n- App Router yapısını kullan\n- TypeScript desteği ekle\n- Temel klasör yapısını oluştur (app, components, lib, types)",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 1
          },
          {
            "id": 2,
            "title": "Supabase Entegrasyonu",
            "description": "Supabase client'ını yapılandır ve veritabanı bağlantısını kur",
            "details": "- Supabase projesi oluştur\n- Supabase client'ını yapılandır\n- Environment variables ayarla\n- PostgreSQL veritabanı bağlantısını test et",
            "status": "done",
            "dependencies": [
              "1.1"
            ],
            "parentTaskId": 1
          },
          {
            "id": 3,
            "title": "Kullanıcı Kimlik Doğrulama",
            "description": "Supabase Auth ile login/logout/signup işlevlerini implement et",
            "details": "- Supabase Auth yapılandırması\n- Login sayfası oluştur\n- Register sayfası oluştur\n- Logout işlevi ekle\n- Auth context/provider oluştur",
            "status": "done",
            "dependencies": [
              "1.2"
            ],
            "parentTaskId": 1
          },
          {
            "id": 4,
            "title": "Tailwind CSS ve Layout Yapısı",
            "description": "Tailwind CSS kurulumu ve responsive layout (Header, Footer) oluştur",
            "details": "- Tailwind CSS kurulumu ve yapılandırması\n- Header component oluştur\n- Footer component oluştur\n- Main layout wrapper oluştur\n- Responsive tasarım test et",
            "status": "done",
            "dependencies": [
              "1.1"
            ],
            "parentTaskId": 1
          },
          {
            "id": 5,
            "title": "ESLint, Prettier ve Proje Yapılandırması",
            "description": "Code quality araçlarını kur ve proje yapısını PRD'ye göre düzenle",
            "details": "- ESLint yapılandırması\n- Prettier yapılandırması\n- Package.json scripts ekle (lint, type-check, build)\n- Git ignore dosyası oluştur\n- README.md oluştur",
            "status": "done",
            "dependencies": [
              "1.1"
            ],
            "parentTaskId": 1
          }
        ]
      },
      {
        "id": 2,
        "title": "Develop Calculation Engine and UI",
        "description": "Implement the business logic for calculating material quantities based on user input (m²) and build the corresponding user interface.",
        "details": "Create backend services for all calculation modules (Düz Tavan, Giydirme Duvar, etc.) using the specified coefficients. Develop the main calculation form on the homepage using React Hook Form and Zod for validation. Build the `ResultsPanel` component to display the calculated list of materials and quantities.",
        "testStrategy": "Write unit tests for each calculation function to verify correctness. Perform UI testing to ensure form validation works as expected. Manually verify that the output in the `ResultsPanel` matches the expected calculations.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Hesaplama Motoru ve Tipler",
            "description": "Malzeme hesaplama motorunu ve gerekli TypeScript tiplerini oluştur",
            "details": "- Malzeme hesaplama tiplerini tanımla (MaterialType, CalculationResult, etc.)\n- Hesaplama motoru fonksiyonlarını oluştur (Düz Tavan, Giydirme Duvar, etc.)\n- Hesaplama katsayılarını tanımla\n- Unit test'ler yaz",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 2,
            "title": "Hesaplama Formu ve Validasyon",
            "description": "Ana hesaplama formunu React Hook Form ve Zod ile oluştur",
            "details": "- React Hook Form ve Zod paketlerini kur\n- Hesaplama formu component'ini oluştur\n- Form validasyon kurallarını tanımla\n- Form state yönetimini implement et",
            "status": "done",
            "dependencies": [
              "2.1"
            ],
            "parentTaskId": 2
          },
          {
            "id": 3,
            "title": "Sonuç Paneli ve Hesaplayıcı Sayfası",
            "description": "Hesaplama sonuçlarını gösteren panel ve hesaplayıcı sayfasını oluştur",
            "details": "- ResultsPanel component'ini oluştur\n- Hesaplayıcı sayfasını (/calculator) oluştur\n- Sonuçları tablo formatında göster\n- Responsive tasarım uygula",
            "status": "done",
            "dependencies": [
              "2.1",
              "2.2"
            ],
            "parentTaskId": 2
          }
        ]
      },
      {
        "id": 3,
        "title": "Develop Backend Web Scraping Service",
        "description": "Build the core web scraping service to fetch material prices from external sources using Puppeteer/Cheerio and implement caching with Redis.",
        "details": "Set up Puppeteer/Cheerio for web scraping. Implement `BaseScraper` and `ConfigurableScraper` classes. Integrate Upstash Redis for caching scraped price data. Implement rate limiting using `@upstash/ratelimit` to avoid being blocked.",
        "testStrategy": "Write integration tests for each scraper to ensure it can correctly fetch and parse prices. Test the caching logic to verify that subsequent requests return a cached result. Test the rate limiting middleware.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Create Admin Panel for Scraping Management",
        "description": "Develop an admin-only section to manage scraping sources and custom material URLs.",
        "details": "Create the database tables: `scraping_sources` and `custom_scraping_urls`. Build API endpoints for CRUD operations on sources and custom URLs. Develop the frontend UI for the `/admin/scraping-urls` page. Implement role-based access control to restrict this section to admin users.",
        "testStrategy": "Test all admin API endpoints. Verify that only users with an 'admin' role can access the admin panel. Manually test the CRUD functionality in the admin UI.",
        "priority": "medium",
        "dependencies": [
          1,
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Implement URL Tester and Preview Tool",
        "description": "Create a tool within the admin panel to test custom scraping URLs and CSS selectors in real-time.",
        "details": "Develop the `/api/custom-urls/[id]/test` endpoint that takes a URL and selectors, performs a live scrape, and returns the result. Build the frontend UI for the `/admin/url-tester` page to input a URL, CSS selectors, and see a live preview of the scraped data.",
        "testStrategy": "Test the test API endpoint with various valid and invalid URLs and selectors. Manually test the UI to ensure it provides clear feedback on success or failure.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Integrate Pricing into Calculation Results",
        "description": "Connect the calculation results with the pricing system to display estimated costs and create a scheduled job for price updates.",
        "details": "Modify the `/api/calculate` endpoint to fetch the latest prices for calculated materials. Update the UI to display unit price, total price, and overall estimated cost. Implement the logic to save calculation results to the database. Create a Vercel cron job to periodically update prices.",
        "testStrategy": "Perform an end-to-end test: enter an area, get a calculation, and verify that prices are displayed and the total cost is correct. Check the database to ensure calculation history is saved. Monitor the cron job logs.",
        "priority": "high",
        "dependencies": [
          2,
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement User Account Features (History & Saving)",
        "description": "Allow registered users to view their past calculations and save/name them for future reference.",
        "details": "Create the `/api/user/calculations` endpoint to fetch a user's calculation history. Develop a 'My Calculations' page to list past calculations. Implement the detail view for a past calculation on the `/calculation/[id]` page.",
        "testStrategy": "As a logged-in user, perform a calculation and verify it appears in the history. Test that clicking a historical calculation correctly loads its details. Ensure a user can only see their own calculations.",
        "priority": "medium",
        "dependencies": [
          1,
          6
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Export and Sharing Features",
        "description": "Add functionality for users to export calculation results as a PDF and share them via a unique link.",
        "details": "Integrate a library like `jspdf` to generate a PDF from the calculation results page. Add a 'PDF Export' button. Implement a 'Share' feature that generates a unique, shareable link to a read-only version of the calculation result.",
        "testStrategy": "Test the PDF export functionality across different browsers. Test the sharing feature by opening a generated link in an incognito window and verifying the results are displayed correctly.",
        "priority": "low",
        "dependencies": [
          7
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Backend Endpoints for Sharing Calculations",
            "description": "Implement the necessary API endpoints and database modifications to support sharing. This includes adding a unique shareable ID to the calculation model and creating endpoints to generate and retrieve shared calculations.",
            "dependencies": [],
            "details": "Modify the `calculations` database table to include a unique, non-sequential `shareId` (e.g., a UUID). Create a `POST /api/calculations/[id]/share` endpoint that generates and saves a `shareId` for a specific calculation. Create a public `GET /api/share/[shareId]` endpoint to fetch calculation data by its `shareId` without requiring authentication.",
            "status": "done",
            "testStrategy": "Test the POST endpoint to ensure it generates a unique ID and associates it with the correct calculation. Test the public GET endpoint to ensure it returns the correct data for a valid ID and returns a 404 for an invalid ID."
          },
          {
            "id": 2,
            "title": "Develop Public Read-Only Page for Shared Links",
            "description": "Create a new page that displays a read-only version of a calculation, accessible via the unique shareable link. This page should not require user authentication.",
            "dependencies": [
              "8.1"
            ],
            "details": "Create a new route and page component for `/s/[shareId]`. This page will use the `shareId` from the URL to call the `GET /api/share/[shareId]` endpoint. Reuse existing result components (like `ResultsPanel`) in a strictly read-only mode to display the fetched data.",
            "status": "done",
            "testStrategy": "Open a generated share link in an incognito browser window to ensure it works without being logged in. Verify all calculation data is displayed correctly and that no editing or user-specific actions are possible."
          },
          {
            "id": 3,
            "title": "Implement 'Share' Button and Link Display UI",
            "description": "Add a 'Share' button to the calculation results page. On click, it should call the backend to get a unique link and display it to the user in a modal with a copy-to-clipboard feature.",
            "dependencies": [
              "8.1",
              "8.2"
            ],
            "details": "On the main calculation results view, add a 'Share' button. Implement a modal that appears on click, calls the `POST /api/calculations/[id]/share` endpoint, and then displays the generated shareable URL (e.g., `https://domain.com/s/[shareId]`) with a 'Copy' button.",
            "status": "done",
            "testStrategy": "As a logged-in user, click the 'Share' button on a saved calculation. Verify the modal appears with a valid URL. Test the 'Copy' button functionality. Verify the generated link works by opening it."
          },
          {
            "id": 4,
            "title": "Integrate PDF Library and Create Generation Service",
            "description": "Integrate a client-side PDF generation library like `jspdf` and `html2canvas`. Develop a service or function that takes calculation data and converts a styled HTML representation of it into a PDF document.",
            "dependencies": [],
            "details": "Install `jspdf` and `html2canvas` libraries. Create a dedicated, potentially hidden, React component (`PdfTemplate`) that formats the calculation results (materials, quantities, prices) for printing. Write a reusable function `generatePdf(calculationData)` that renders this component to an off-screen canvas and then uses `jspdf` to convert it into a PDF file.",
            "status": "done",
            "testStrategy": "Write a unit test for the `generatePdf` function using mock calculation data. Manually trigger the function during development to inspect the generated PDF for correct layout, styling, and data accuracy."
          },
          {
            "id": 5,
            "title": "Add 'PDF Export' Button to UI",
            "description": "Implement a 'PDF Export' button on the calculation results page (both the standard and the public shared view) that triggers the PDF generation and download.",
            "dependencies": [
              "8.2",
              "8.4"
            ],
            "details": "Add a 'PDF Export' button to the `ResultsPanel` component, ensuring it appears on both the user's private calculation view and the public shared page. The button's `onClick` handler will call the `generatePdf` service with the relevant calculation data, triggering a browser download of the resulting PDF file with a descriptive name (e.g., `calculation-results-[id].pdf`).",
            "status": "done",
            "testStrategy": "Click the 'Export PDF' button on a results page and verify a PDF file is downloaded. Open the file and confirm its contents match the on-screen results. Repeat this test on the public shared view and across different browsers as per the parent task's test strategy."
          }
        ]
      },
      {
        "id": 9,
        "title": "Finalize CI/CD, Monitoring, and Deployment",
        "description": "Set up the complete CI/CD pipeline, configure monitoring and error tracking, and prepare for production deployment on Vercel.",
        "details": "Create the `.github/workflows/deploy.yml` file for automated testing and deployment. Configure Vercel environment variables and `vercel.json`. Integrate Sentry for error tracking and Vercel Analytics for performance monitoring.",
        "testStrategy": "Trigger the CI/CD pipeline by pushing to `develop` and `main` branches and verify all steps execute correctly. Intentionally create an error to confirm it's captured by Sentry. Review the Vercel Analytics dashboard.",
        "priority": "high",
        "dependencies": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ],
        "status": "in-progress",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure Vercel Project and Environment Variables",
            "description": "Set up the project on Vercel, link it to the GitHub repository, and configure all necessary environment variables for production and preview deployments.",
            "dependencies": [],
            "details": "Create the project in the Vercel dashboard. Connect the correct GitHub repository. In the Vercel project settings, add all required environment variables (e.g., `SUPABASE_URL`, `SUPABASE_ANON_KEY`, `SENTRY_DSN`) for both production and preview environments. Create and push a `vercel.json` file if custom build outputs, headers, or redirects are needed.",
            "status": "done",
            "testStrategy": "Verify that the Vercel project is linked to the GitHub repository. Manually trigger a deployment from the Vercel dashboard to confirm basic build and deployment works with the configured environment variables."
          },
          {
            "id": 2,
            "title": "Create GitHub Actions Workflow for CI/CD",
            "description": "Develop the `.github/workflows/deploy.yml` file to automate the continuous integration and deployment process.",
            "dependencies": [
              "9.1"
            ],
            "details": "Create a workflow that triggers on pushes to the `main` and `develop` branches. The workflow should include jobs to: 1) Install dependencies, 2) Run linter (ESLint) and formatter (Prettier) checks, 3) Execute automated tests, 4) Trigger a Vercel deployment. The deployment step should pass the appropriate Vercel tokens and project IDs as secrets.",
            "status": "done",
            "testStrategy": "Push a commit to a feature branch to ensure the workflow does not trigger. Push a commit to the `develop` branch and verify all jobs (lint, test, deploy) execute successfully, resulting in a new preview deployment on Vercel."
          },
          {
            "id": 3,
            "title": "Integrate Sentry SDK for Error Tracking",
            "description": "Integrate the Sentry SDK into the Next.js application to capture and report frontend and backend errors to the Sentry platform.",
            "dependencies": [
              "9.1"
            ],
            "details": "Install the `@sentry/nextjs` package. Run the Sentry wizard (`npx @sentry/wizard@latest -i nextjs`) or manually create the necessary configuration files (`sentry.client.config.ts`, `sentry.server.config.ts`, `next.config.mjs`). Use the `SENTRY_DSN` environment variable configured in Vercel.",
            "status": "done",
            "testStrategy": "After deployment, manually trigger a client-side error (e.g., via a button that calls a non-existent function) and a server-side error (e.g., in an API route or Server Component). Verify that both errors appear in the Sentry project dashboard with relevant stack traces and context."
          },
          {
            "id": 4,
            "title": "Enable Vercel Analytics and Speed Insights",
            "description": "Activate and configure Vercel's built-in analytics to monitor performance metrics and Core Web Vitals.",
            "dependencies": [
              "9.1"
            ],
            "details": "In the Vercel project dashboard, navigate to the 'Analytics' tab and enable it. Install the `@vercel/analytics` package and add the `<Analytics />` component to the root layout (`app/layout.tsx`) of the Next.js application. Also, enable 'Speed Insights' from the Vercel dashboard.",
            "status": "done",
            "testStrategy": "After deploying the changes, visit several pages of the live application. Return to the Vercel Analytics dashboard after a short period and confirm that page views and performance scores (Core Web Vitals) are being recorded."
          },
          {
            "id": 5,
            "title": "Final Validation of Production Deployment Pipeline",
            "description": "Perform a full end-to-end test by merging to the main branch, verifying the production deployment, and confirming all monitoring tools are active.",
            "dependencies": [
              "9.2",
              "9.3",
              "9.4"
            ],
            "details": "Create a pull request from `develop` to `main`. After approval, merge the PR. Monitor the GitHub Actions workflow to ensure the production deployment job runs and succeeds. Access the production URL to confirm the latest changes are live. Re-verify that Sentry is active and Vercel Analytics is collecting data for the production domain.",
            "status": "in-progress",
            "testStrategy": "Confirm the GitHub Action triggered on the merge to `main` and completed successfully. Check the production URL and verify its functionality. Review Sentry and Vercel Analytics dashboards to ensure they are receiving data from the production environment."
          }
        ]
      },
      {
        "id": 10,
        "title": "Performance Optimization and Advanced Reporting",
        "description": "Optimize frontend and backend performance and implement advanced reporting features like price trend charts.",
        "details": "Implement frontend optimizations like code-splitting and image optimization. Optimize database queries by adding indexes. Integrate Recharts to create a `ComparisonChart` component that visualizes price trends for materials over time.",
        "testStrategy": "Use Lighthouse or Vercel Analytics to measure performance scores before and after optimizations. Test the chart component to ensure it renders correctly. Load test API endpoints to ensure they respond quickly.",
        "priority": "low",
        "dependencies": [
          6,
          7
        ],
        "status": "To Do",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-01T13:33:23.157Z",
      "updated": "2025-09-01T18:55:44.331Z",
      "description": "Tasks for master context"
    }
  }
}